// <auto-generated />
using System;
using HelloAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HelloAPI.Migrations
{
    [DbContext(typeof(HelloContext))]
    [Migration("20240122152638_AddedUserProfile")]
    partial class AddedUserProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HelloAPI.Data.Entities.Moderator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Moderator");
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Organizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActivityArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Organizer");
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Publication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ModeratorId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Publication");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PublicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PriorityValue")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActivitySector")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("activity_sector");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organisation");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id")
                        .HasName("userprofile_pkey");

                    b.ToTable("userprofile");
                });

            modelBuilder.Entity("PublicationTag", b =>
                {
                    b.Property<long>("PublicationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("PublicationsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PublicationTag");
                });

            modelBuilder.Entity("TagTag", b =>
                {
                    b.Property<long>("ChildrenTagsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParentTagsId")
                        .HasColumnType("bigint");

                    b.HasKey("ChildrenTagsId", "ParentTagsId");

                    b.HasIndex("ParentTagsId");

                    b.ToTable("TagsHierarchy", (string)null);
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Event", b =>
                {
                    b.HasBaseType("HelloAPI.Data.Entities.Publication");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Publication", b =>
                {
                    b.HasOne("HelloAPI.Data.Entities.Moderator", "Moderator")
                        .WithMany("Publications")
                        .HasForeignKey("ModeratorId");

                    b.HasOne("HelloAPI.Data.Entities.Organizer", "Organizer")
                        .WithMany("Publications")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Report", b =>
                {
                    b.HasOne("HelloAPI.Data.Entities.Publication", "Publications")
                        .WithMany("Reports")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publications");
                });

            modelBuilder.Entity("PublicationTag", b =>
                {
                    b.HasOne("HelloAPI.Data.Entities.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelloAPI.Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTag", b =>
                {
                    b.HasOne("HelloAPI.Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("ChildrenTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelloAPI.Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("ParentTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Event", b =>
                {
                    b.HasOne("HelloAPI.Data.Entities.Publication", null)
                        .WithOne()
                        .HasForeignKey("HelloAPI.Data.Entities.Event", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Moderator", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Organizer", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("HelloAPI.Data.Entities.Publication", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
